buildscript {
    repositories {
        jcenter()
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

group = "com.denniscorvers.recipeexporter"
version = "$minecraft_version-$version_major.$version_minor"
archivesBaseName = "RecipeExporter-$minecraft_version"

configurations {
    shade
    compile.extendsFrom shade
}

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    compile "com.google.code.gson:gson:2.8.6"
    compile "net.lingala.zip4j:zip4j:1.2.4"

    compile fileTree(dir: 'libs', include: '*.jar')
    compile fileTree(dir: 'libs', include: '*.zip')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

minecraft {
    mappings channel: project.mcp_channel, version: project.mcp_mappings

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        def commonRunProperties = {
            workingDirectory project.file("run")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                recipeexporter {
                    source sourceSets.main
                }
            }
        }

        client {
            with commonRunProperties
        }
    }
}

processResources {
    exclude ".cache"

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

jar {
    finalizedBy "reobfJar"

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    manifest {
        attributes([
                "Specification-Title"     : archivesBaseName,
                "Specification-Vendor"    : group,
                "Specification-Version"   : version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : group,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Signing-Fingerprint"     : project.hasProperty('signSHA1') ? project.findProperty('signSHA1') : "unsigned"
        ])
    }
}